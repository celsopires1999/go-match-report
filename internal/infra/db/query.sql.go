// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package db

import (
	"context"
	"time"
)

const createTenant = `-- name: CreateTenant :exec
INSERT INTO tenants (id, name, created_at, updated_at) VALUES ($1, $2, $3, $4)
`

type CreateTenantParams struct {
	ID        string
	Name      string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateTenant(ctx context.Context, arg CreateTenantParams) error {
	_, err := q.db.ExecContext(ctx, createTenant,
		arg.ID,
		arg.Name,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteTenant = `-- name: DeleteTenant :exec
DELETE FROM tenants WHERE id = $1
`

func (q *Queries) DeleteTenant(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteTenant, id)
	return err
}

const findTenantById = `-- name: FindTenantById :one
SELECT id, name, created_at, updated_at FROM tenants WHERE id = $1 LIMIT 1
`

func (q *Queries) FindTenantById(ctx context.Context, id string) (Tenant, error) {
	row := q.db.QueryRowContext(ctx, findTenantById, id)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTenant = `-- name: UpdateTenant :exec
UPDATE tenants SET name = $1, updated_at = $2 WHERE id = $3
`

type UpdateTenantParams struct {
	Name      string
	UpdatedAt time.Time
	ID        string
}

func (q *Queries) UpdateTenant(ctx context.Context, arg UpdateTenantParams) error {
	_, err := q.db.ExecContext(ctx, updateTenant, arg.Name, arg.UpdatedAt, arg.ID)
	return err
}
